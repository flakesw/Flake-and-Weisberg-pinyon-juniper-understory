{
    "collab_server" : "",
    "contents" : "## Understory electivity\nlibrary(plyr)\nlibrary(vioplot)\nlibrary(reshape2)\n\ndaub <- read.csv(\"daub_cover.csv\")\ndaub <- daub[(daub$Transect %in% c(\"N\", \"E\", \"S\", \"W\")), ]\ndaub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))\ndaub$unique_quad <- paste0(daub$Plot, daub$Transect, daub$Meter)\n\n\nspecies<- read.csv(\"spp_cover2.csv\")\nspecies <- species[(species$Transect %in% c(\"N\", \"E\", \"S\", \"W\")), ]\nspecies$unique_quad <- paste0(species$Plot, species$Transect, species$Meter)\n\nlength(unique(daub$unique_quad))\nspp_abund <- aggregate(species$Cover / 2002, by = list(species$Species), FUN = sum)\nspp_abund <- spp_abund[order(spp_abund[, 1], decreasing = FALSE), ]\n\nquadrat_abund <- as.data.frame(table(species[species$Cover != 0, ]$Species))\nquadrat_abund <- quadrat_abund[order(quadrat_abund[, 1], decreasing = FALSE), ]\nquadrat_abund[, 2] <- quadrat_abund[, 2] * 100 / 2002\n\n\ncount <- table(species$Species, species$Plot)\nis.not.zero <- function(x){\n  if((x) == 0){return(0)}\n  else{return(1)}\n}\npresence <- apply(count, c(1,2), FUN = is.not.zero)\nplot_presence <- as.data.frame(rowSums(presence))/102*100\n\nspp_abund <- cbind(spp_abund, quadrat_abund[-1, 2], plot_presence[-1, 1])\n\nwrite.csv(spp_abund, \"species_summary.csv\")\n\nplot_abund <- matrix(NA, nrow = length(unique(species$Species)), ncol = length(unique(species$Plot)),\n                     dimnames = list(Species = unique(species$Species), Plot = unique(species$Plot)))\n                    \n\nfor (i in 1:length(unique(species$Plot))){\n  for (j in 1:length(unique(species$Species))){\n    plot_abund[j, i] <- \n  }\n}\n\n\n\n\nspp_cov <- data.frame(unique_quad = unique(species$unique_quad),\n                     poasec = numeric(2007),\n                     othergrass = numeric(2007),\n                     phlhoo = numeric(2007),\n                     otherforb = numeric(2007))\n\n\nfor(i in 1:2007){\n  spp_cov$poasec[i] <- ifelse(species[species$unique_quad == spp_cov$unique_quad[i], ]$Species == \"POASEC\",\n    species[species$unique_quad == spp_cov$unique_quad[i] & species$Species == \"POASEC\", ]$Cover, 0)\n  \n  spp_cov$othergrass[i] <- ifelse(species[species$unique_quad == spp_cov$unique_quad[i], ]$Species %in% c(\"PSESPI\", \"LEYCIN\", \"ELYELY\", \"STITHU\"),\n                                   sum(species[species$unique_quad == spp_cov$unique_quad[i] \n                                               & species$Species %in% c(\"PSESPI\", \"LEYCIN\", \"ELYELY\", \"STITHU\"), ]$Cover), 0)\n  \n  spp_cov$phlhoo[i] <- ifelse(species[species$unique_quad == spp_cov$unique_quad[i], ]$Species == \"PHLHOO\",\n                              species[species$unique_quad == spp_cov$unique_quad[i] & species$Species == \"PHLHOO\", ]$Cover, 0)\n  \n  spp_cov$otherforb[i] <- ifelse(species[species$unique_quad == spp_cov$unique_quad[i], ]$Species %in% c(\"CREACA\", \"CREACU\", \"STEACA\", \"ERICAE\", \"LEPPUN\", \"ERIUMB\", \"AREACU\",\"LESKIN\",\"GALAPA\",\"ASTPUR\",\"BALSAG\",\"CRYFLA\",\"ERIMIC\",\"MINKIN\",\"ASTOOP\",\"OPUPOL\",\"ARAHOL\",\"ANTDIM\",\"BOEHOL\"),\n                                  sum(species[species$unique_quad == spp_cov$unique_quad[i] \n                                              & species$Species %in% c(\"CREACA\", \"CREACU\", \"STEACA\", \"ERICAE\", \"LEPPUN\", \"ERIUMB\", \"AREACU\",\"LESKIN\",\"GALAPA\",\"ASTPUR\",\"BALSAG\",\"CRYFLA\",\"ERIMIC\",\"MINKIN\",\"ASTOOP\",\"OPUPOL\",\"ARAHOL\",\"ANTDIM\",\"BOEHOL\"), ]$Cover), 0)\n}\n                     \n\nms <- read.csv(\"microsite.csv\")\nms$ms <- ifelse(ms$Microsite %in% c(\"PI\",  \"JI\",  \"CI\"), \"Live Inner\",\n                ifelse(ms$Microsite %in% c(\"PO\", \"JO\", \"CO\"), \"Live Outer\", \n                ifelse(ms$Microsite %in% c(\"PI(S)\", \"PO(S)\", \"JI(S)\", \"JO(S)\", \"CI(S)\", \"CO(S)\"), \"Dead\",\n                       ifelse(ms$Microsite ==\"LOG\", \"Log\",\n                       ifelse(ms$Microsite == \"I\", \"Inter\", NA)))))\nunique(ms$Microsite)\nms$ms\nms$unique_quad <- paste0(ms$Plot, ms$Transect, ms$Meter)\n\ntotal_cover <- aggregate(daub$Midpoint.value, by = list(daub$Plot, daub$Cover.type), FUN = sum)\n\n\nplots_to_use_dead <- NA\nplots_to_use_live <- NA\nfor(i in 1:length(unique(ms$Plot))){\n  #this is a real friggin mess but it pulls out the plots which have at least one dead and at least one live ms\n  plots_to_use_dead[i] <- length(table(ms[ms$Plot == unique(ms$Plot)[i], ]$ms)[which((names(table(ms[ms$Plot == unique(ms$Plot)[i], ]$ms)) == \"Dead\"))]) != 0L\n  plots_to_use_live[i] <- length(table(ms[ms$Plot == unique(ms$Plot)[i], ]$ms)[which((names(table(ms[ms$Plot == unique(ms$Plot)[i], ]$ms)) == \"Live\"))]) != 0L\n  }\n\nplots_to_use <- unique(ms$Plot)[plots_to_use_dead & plots_to_use_live]\n\n\ngrass_elect_results <- data.frame(Plot = character(0),\n                                  Dead = numeric(0),\n                                  Live = numeric(0),\n                                  Inter = numeric(0))\n\ni<-23\nfor (i in 1:length(plots_to_use)){\n  \ntest_grass_cov <- daub[daub$Cover.type == \"Perennial grass\" & daub$Plot == as.character(plots_to_use[i]), ]\ntest_grass_cov <- join(test_grass_cov, ms[, c(\"unique_quad\", \"ms\")], by = \"unique_quad\", type = \"inner\")\n\ntest_grass_cov$prop_cov <- test_grass_cov$Midpoint.value / sum(test_grass_cov$Midpoint.value)\n\ncov <- aggregate(test_grass_cov[, \"prop_cov\"], by = list(test_grass_cov$ms), FUN = sum)\nprev <- table(test_grass_cov$ms)/20\n\nelect <- data.frame(Plot = test_grass_cov$Plot[1],\n                    Dead = (cov[cov$Group.1 == \"Dead\",2] - prev[which(names(prev) == \"Dead\")]) / \n                      (cov[cov$Group.1 == \"Dead\", 2] + prev[which(names(prev) == \"Dead\")]),\n                    Live = (cov[cov$Group.1 == \"Live\",2] - prev[which(names(prev) == \"Live\")]) / \n                      (cov[cov$Group.1 == \"Live\",2] + prev[which(names(prev) == \"Live\")]),\n                    Inter = (cov[cov$Group.1 == \"Inter\",2] - prev[which(names(prev) == \"Inter\")]) / \n                      (cov[cov$Group.1 == \"Inter\",2] + prev[which(names(prev) == \"Inter\")]))\n\ngrass_elect_results <- rbind(grass_elect_results, elect)\n}\n\nvioplot(grass_elect_results$Inter, grass_elect_results$Live, grass_elect_results$Dead)\n\n\n\n#------------------------------------------------------------------------------------------------------------\n\nforb_elect_results <- data.frame(Plot = character(0),\n                                  Dead = numeric(0),\n                                  Live = numeric(0),\n                                  Inter = numeric(0))\ni<-1\nfor (i in 1:length(plots_to_use)){\n  \n  test_grass_cov <- daub[daub$Cover.type == \"Perennial forb \" & daub$Plot == as.character(plots_to_use[i]), ]\n  test_grass_cov <- join(test_grass_cov, ms[, c(\"unique_quad\", \"ms\")], by = \"unique_quad\", type = \"inner\")\n  \n  test_grass_cov$prop_cov <- test_grass_cov$Midpoint.value / sum(test_grass_cov$Midpoint.value)\n  \n  cov <- aggregate(test_grass_cov[, \"prop_cov\"], by = list(test_grass_cov$ms), FUN = sum)\n  prev <- table(test_grass_cov$ms)/20\n  \n  elect <- data.frame(Plot = test_grass_cov$Plot[1],\n                      Dead = (cov[cov$Group.1 == \"Dead\",2] - prev[which(names(prev) == \"Dead\")]) / \n                        (cov[cov$Group.1 == \"Dead\", 2] + prev[which(names(prev) == \"Dead\")]),\n                      Live = (cov[cov$Group.1 == \"Live\",2] - prev[which(names(prev) == \"Live\")]) / \n                        (cov[cov$Group.1 == \"Live\",2] + prev[which(names(prev) == \"Live\")]),\n                      Inter = (cov[cov$Group.1 == \"Inter\",2] - prev[which(names(prev) == \"Inter\")]) / \n                        (cov[cov$Group.1 == \"Inter\",2] + prev[which(names(prev) == \"Inter\")]))\n  \n  forb_elect_results <- rbind(forb_elect_results, elect)\n}\n\n\nvioplot(forb_elect_results$Inter, forb_elect_results$Live, forb_elect_results$Dead)\n\n\n\n#----------------------------------------------------------------------------------------------------------\n\nshrub_elect_results <- data.frame(Plot = character(0),\n                                 Dead = numeric(0),\n                                 Live = numeric(0),\n                                 Inter = numeric(0),\n                                 Log = numeric(0)\ni<-11\nfor (i in 1:length(plots_to_use)){\n  \n  test_grass_cov <- daub[daub$Cover.type == \"Shrub \" & daub$Plot == as.character(plots_to_use[i]), ]\n  test_grass_cov <- join(test_grass_cov, ms[, c(\"unique_quad\", \"ms\")], by = \"unique_quad\", type = \"inner\")\n  \n  test_grass_cov$prop_cov <- test_grass_cov$Midpoint.value / sum(test_grass_cov$Midpoint.value)\n  \n  cov <- aggregate(test_grass_cov[, \"prop_cov\"], by = list(test_grass_cov$ms), FUN = sum)\n  prev <- table(test_grass_cov$ms)/20\n  \n  elect <- data.frame(Plot = test_grass_cov$Plot[1],\n                      Dead = (cov[cov$Group.1 == \"Dead\",2] - prev[which(names(prev) == \"Dead\")]) / \n                        (cov[cov$Group.1 == \"Dead\", 2] + prev[which(names(prev) == \"Dead\")]),\n                      \n                      Live = (cov[cov$Group.1 == \"Live\",2] - prev[which(names(prev) == \"Live\")]) / \n                        (cov[cov$Group.1 == \"Live\",2] + prev[which(names(prev) == \"Live\")]),\n                      \n                      Inter = (cov[cov$Group.1 == \"Inter\",2] - prev[which(names(prev) == \"Inter\")]) / \n                        (cov[cov$Group.1 == \"Inter\",2] + prev[which(names(prev) == \"Inter\")]),\n                      Log = (cov[cov$Group.1 == \"Inter\",2] - prev[which(names(prev) == \"Inter\")]) / \n                        (cov[cov$Group.1 == \"Inter\",2] + prev[which(names(prev) == \"Inter\")]))\n  \n  shrub_elect_results <- rbind(shrub_elect_results, elect)\n}\n\n\nvioplot(shrub_elect_results$Inter, shrub_elect_results$Live, shrub_elect_results$Dead)\n\n#-----------------------------------------------------------------------------------------------------\n\n#----------------------------------------------------------------------------------------------------------\n\ncheat_elect_results <- data.frame(Plot = character(0),\n                                  Dead = numeric(0),\n                                  Live = numeric(0),\n                                  Inter = numeric(0))\ni<-11\nfor (i in 1:length(plots_to_use)){\n  \n  test_grass_cov <- daub[daub$Cover.type == \"Cheatgrass\" & daub$Plot == as.character(plots_to_use[i]), ]\n  test_grass_cov <- join(test_grass_cov, ms[, c(\"unique_quad\", \"ms\")], by = \"unique_quad\", type = \"inner\")\n  \n  test_grass_cov$prop_cov <- test_grass_cov$Midpoint.value / sum(test_grass_cov$Midpoint.value)\n  \n  cov <- aggregate(test_grass_cov[, \"prop_cov\"], by = list(test_grass_cov$ms), FUN = sum)\n  prev <- table(test_grass_cov$ms)/20\n  \n  elect <- data.frame(Plot = test_grass_cov$Plot[1],\n                      Dead = (cov[cov$Group.1 == \"Dead\",2] - prev[which(names(prev) == \"Dead\")]) / \n                        (cov[cov$Group.1 == \"Dead\", 2] + prev[which(names(prev) == \"Dead\")]),\n                      \n                      Live = (cov[cov$Group.1 == \"Live\",2] - prev[which(names(prev) == \"Live\")]) / \n                        (cov[cov$Group.1 == \"Live\",2] + prev[which(names(prev) == \"Live\")]),\n                      \n                      Inter = (cov[cov$Group.1 == \"Inter\",2] - prev[which(names(prev) == \"Inter\")]) / \n                        (cov[cov$Group.1 == \"Inter\",2] + prev[which(names(prev) == \"Inter\")]))\n  \n  cheat_elect_results <- rbind(cheat_elect_results, elect)\n}\n\n\nvioplot(cheat_elect_results$Inter, cheat_elect_results$Live, cheat_elect_results$Dead)\n\n#-----------------------------------------------------------------------------------------------\n# For whole study area\n#-----------------------------------------------------------------------------------------------\nall_merged <- join(daub, ms, by = \"unique_quad\", type = \"inner\")\n\ndaub$unique_quad\nms$unique_quad\n\n\nall_plots_prev <- table(all_merged$ms)\nall_plots_prev <- all_plots_prev / sum(all_plots_prev)\n\nall_plots_cover <- aggregate(all_merged$Midpoint.value, by = list(all_merged$Cover.type, all_merged$ms), FUN = sum)\nall_plots_cover <- all_plots_cover[all_plots_cover$Group.1 %in% c(\"Perennial grass\", \"Perennial forb \", \"Shrub \", \"Cheatgrass\"), ]\n\nfor (i in 1:4){ # standardized cover so it adds to 1 for each functional type\n  types <- c(\"Cheatgrass\", \"Perennial forb \", \"Perennial grass\", \"Shrub \")\n  all_plots_cover[all_plots_cover$Group.1 == types[i], \"x\"] <- all_plots_cover[all_plots_cover$Group.1 == types[i], \"x\"] / \n    sum(all_plots_cover[all_plots_cover$Group.1 == types[i], \"x\"])\n}\n\n\n\nall_plots_cover <- dcast(all_plots_cover, Group.1 ~ Group.2) #reshapes the table\n\nall_elect <- data.frame(type = c(\"Cheatgrass\", \"Perennial forb\", \"Perennial grass\", \"Shrub\"),\n                        Dead = numeric(4),\n                        Inter = numeric(4),\n                        LiveInner = numeric(4),\n                        LiveOuter = numeric(4),\n                        Log = numeric(4))\n\nfor (i in 2:6){ #calculate electivity\n  for (j in 1:4){\n    all_elect[j, i] <- (all_plots_cover[j,i] - all_plots_prev[i - 1]) / (all_plots_cover[j,i] + all_plots_prev[i - 1])\n  }\n}\n\n\n#--------------------------------------------------------------------\n\nspp_merged <- join(spp_cov, ms, by = \"unique_quad\", type = \"inner\")\nhead(spp_merged)\n\n\nspp_plots_prev <- table(spp_merged$ms)\nspp_plots_prev <- spp_plots_prev / sum(spp_plots_prev)\n\nspp_merged$poasec <- spp_merged$poasec / sum(spp_merged$poasec)\nspp_merged$othergrass <- spp_merged$othergrass / sum(spp_merged$othergrass)\nspp_merged$phlhoo <- spp_merged$phlhoo / sum(spp_merged$phlhoo)\nspp_merged$otherforb <- spp_merged$otherforb / sum(spp_merged$otherforb)\n\nspp_ag <- aggregate(spp_merged[, c(\"poasec\", \"othergrass\", \"phlhoo\", \"otherforb\")], by = list(spp_merged$ms), FUN = sum)\n\n\nspp_elect <- data.frame(type = c(\"POASEC\", \"Other Perr Grass\", \"PHLHOO\", \"Other Forb\"),\n                        Dead = numeric(4),\n                        Inter = numeric(4),\n                        LiveInner = numeric(4),\n                        LiveOuter = numeric(4),\n                        Log = numeric(4))\n\nfor (i in 1:5){ #calculate electivity\n  for (j in 1:4){\n    spp_elect[j, i+1] <- (unname(spp_ag[i,j + 1]) - unname(all_plots_prev[i])) / (unname(spp_ag[i,j + 1]) + unname(all_plots_prev[i]))\n  }\n}\n",
    "created" : 1466893305923.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2312542917",
    "id" : "4660629A",
    "lastKnownWriteTime" : 1478133418,
    "last_content_update" : 1478133418520,
    "path" : "C:/Users/Sam/Google Drive/Projects/MS Thesis/Understory/understory_electivity.R",
    "project_path" : "understory_electivity.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}
results_boots[[i]] <- data.frame(Dead = numeric(2),
Live = numeric(2),
Inter = numeric(2),
DL = numeric(2),
DI = numeric(2),
LI = numeric(2))
rownames(results_boots[[i]]) <- c("Empirical", "N_boots_greater")
}
names(results_boots) <- types
#calculate p-values from distribution of bootstrapped mean electivities
for(i in 1:5){
emp_mean <- apply(elect_results[[i]][, 2:7], 2, FUN = function(x){mean(x, na.rm = TRUE)})
pvals <- c(sum(elect_means[[i]][2] > emp_mean[1]),
sum(elect_means[[i]][3] > emp_mean[2]),
sum(elect_means[[i]][4] > emp_mean[3]),
sum(elect_means[[i]][5] > emp_mean[4]),
sum(elect_means[[i]][6] > emp_mean[5]),
sum(elect_means[[i]][7] > emp_mean[6]))
#flip around large p-values to make them small p-values for the left tail
pvals <- ifelse(pvals > (nit + 1)/2, (nit + 1 - pvals)/(nit + 1), pvals/(nit + 1))
results_boots[[i]][1, ] <- emp_mean
results_boots[[i]][2, ] <- pvals
}
results_boots
nit <- 999 #number of monte carlo draws
#initialize a list of dataframes to catch the electivities at each plot/FT
elect_means <- list()
for(i in 1:5){
elect_means[[i]] <- data.frame(Iter = numeric(0),
Dead = numeric(0),
Live = numeric(0),
Inter = numeric(0),
DL = numeric(0),
DI = numeric(0),
LI = numeric(0))
}
names(elect_means) <- types
system.time(#takes about a half hour
for(type in types){
plot_to_use_type <- subset(elect_results[[type]], !is.na(Dead))$Plot
for(j in 1:nit){
elect_rand <- data.frame(Plot = character(0),
Dead = numeric(0),
Live = numeric(0),
Inter = numeric(0),
DL = numeric(0),
DI = numeric(0),
DL = numeric(0))
for (plot_use in plot_to_use_type){
if(type == "All"){
daub_cov <- daub[daub$Plot == as.character(plot_use), ]
daub_cov <- daub_cov[daub_cov$Cover.type %in% c("Cheatgrass", "Other Ann Grass",
"Perennial grass", "Annual forb", "Perennial forb", "Shrub"), ]
daub_cov_2 <- aggregate(daub_cov$Midpoint.value, by = list(daub_cov$unique_quad), FUN = sum)
names(daub_cov_2) <- c("unique_quad", "Midpoint.value")
daub_cov <- join(daub_cov_2, ms[, c("unique_quad", "ms")], by = "unique_quad", type = "inner")
}else{
daub_cov <- daub[daub$Cover.type == type & daub$Plot == as.character(plot_use), ]
daub_cov <- join(daub_cov, ms[, c("unique_quad", "ms")], by = "unique_quad", type = "inner")
}
daub_cov$prop_cov <- daub_cov$Midpoint.value / sum(daub_cov$Midpoint.value)
daub_cov$prop_cov_ran <- sample(daub_cov$prop_cov, size = 20, replace = FALSE)
cov <- aggregate(daub_cov[, "prop_cov_ran"], by = list(daub_cov$ms), FUN = sum)
prev <- table(daub_cov$ms)/20
elect <- data.frame(Plot = plot_use,
Dead = (cov[cov$Group.1 == "Dead",2] - prev[which(names(prev) == "Dead")]) /
(cov[cov$Group.1 == "Dead", 2] + prev[which(names(prev) == "Dead")]),
Live = (cov[cov$Group.1 == "Live",2] - prev[which(names(prev) == "Live")]) /
(cov[cov$Group.1 == "Live",2] + prev[which(names(prev) == "Live")]),
Inter = (cov[cov$Group.1 == "Inter",2] - prev[which(names(prev) == "Inter")]) /
(cov[cov$Group.1 == "Inter",2] + prev[which(names(prev) == "Inter")]))
elect$DL = elect$Dead - elect$Live
elect$DI = elect$Dead - elect$Inter
elect$LI = elect$Live - elect$Inter
elect_rand <- rbind(elect_rand, elect)
}
means <- apply(elect_rand[, c(2:7)], 2, FUN = function(x){mean(x, na.rm = TRUE)})
elect_means[[type]][j, 1] <- j
elect_means[[type]][j, 2:7] <- means
}
}
)
results_boots <- list()
for(i in 1:5){
results_boots[[i]] <- data.frame(Dead = numeric(2),
Live = numeric(2),
Inter = numeric(2),
DL = numeric(2),
DI = numeric(2),
LI = numeric(2))
rownames(results_boots[[i]]) <- c("Empirical", "N_boots_greater")
}
names(results_boots) <- types
#calculate p-values from distribution of bootstrapped mean electivities
for(i in 1:5){
emp_mean <- apply(elect_results[[i]][, 2:7], 2, FUN = function(x){mean(x, na.rm = TRUE)})
pvals <- c(sum(elect_means[[i]][2] > emp_mean[1]),
sum(elect_means[[i]][3] > emp_mean[2]),
sum(elect_means[[i]][4] > emp_mean[3]),
sum(elect_means[[i]][5] > emp_mean[4]),
sum(elect_means[[i]][6] > emp_mean[5]),
sum(elect_means[[i]][7] > emp_mean[6]))
#flip around large p-values to make them small p-values for the left tail
pvals <- ifelse(pvals > (nit + 1)/2, (nit + 1 - pvals)/(nit + 1), pvals/(nit + 1))
results_boots[[i]][1, ] <- emp_mean
results_boots[[i]][2, ] <- pvals
}
png(filename="electivity.png",
type="cairo",
units="in",
width = 4,
height=6,
pointsize=12,
res=160)
par(mfrow = c(3,2),
mar = c(2,1,1,2),
oma = c(2,3,1,0))
for(i in 1:5){
melt_elect <- melt(elect_results[[i]][, 2:4])
plot(melt_elect$value ~ I(as.numeric(melt_elect$variable)+ runif(nrow(melt_elect), -.1, .1 )),
ylim = c(-1,1),
xlim = c(.7, 3.3),
pch = 21,
bg = "grey",
xaxt = "n")
pvals <- results_boots[[i]][2, ]
abline(h = 0)
means <- aggregate(melt_elect$value, by = list(melt_elect$variable), FUN = function(x){mean(x, na.rm = TRUE)})
segments(x0 = c(0.9, 1.9, 2.9), y0 = means$x, x1 = c(1.1, 2.1, 3.1), lwd = 3)
# segments(x0 = 1, x1 = 2, y0 = melt_elect[melt_elect$variable == "Dead", "value"],
#          y1 = melt_elect[melt_elect$variable == "Live", "value"])
#
# segments(x0 = 2, x1 = 3, y0 = melt_elect[melt_elect$variable == "Live", "value"],
#          y1 = melt_elect[melt_elect$variable == "Inter", "value"])
if(i %in% c(1,2)){
axis(1, at = c(1,2,3), labels = FALSE)
}
if(i %in% c(3,4)){
axis(1, at = c(1,2,3), labels =  c("Dead", "Live", "Interspace"))
}
text(x = c(1,2,3), y = 0.9, labels = pvals[2:4])
mtext(text = types[i], outer = FALSE, side = 3, line = 0)
mtext(text = paste0("(", letters[i], ")"), outer = FALSE, side = 3, at = 0.5, line = 0)
mtext(text = "Electivity", outer = TRUE, side = 2, line = 1.5)
}
dev.off()
plot_data
plot_data <- read.csv("./clean data/plot_data.csv")
plot_data <- read.csv("./clean data/plot_data.csv")
plot_data
##Understory data formatting
##
library("reshape2")
library("plyr")
library("effects")
daub <- read.csv("./raw data/daub_cover.csv")
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
trees <- read.csv("./raw data/trees_updated_with_logs_041716.csv")
tree_pdc <- read.csv("./raw data/all_trees_with_delta_and_ENN_041916.csv")
greenwood_under <- read.csv("./raw data/Greenwood_Understory_Variables_SF_edits.csv")
tcover <- read.csv("./raw data/tree_and_shrub_cover_020815.csv")
names(tcover)[3] <- "Shrub_cover_li"
source("./calculate_awc.R")
soil <- calculate_awc(soil_raw = "./raw data/soils_missing_imputed_012016.csv")
clim <- read.csv("./raw data/ALL_climate_variables.csv")
names(clim)[2] <- "Plot"
other_vars <- read.csv("./raw data/all_vars_EXPORT.csv")
#remaking data into plot average cover
plot_daub_cover <- dcast(daub, Plot ~ Cover.type, value.var = "Midpoint.value", fun.aggregate = mean)
names(plot_daub_cover) <- c("Plot", "Aforb", "Bg", "Cheatgrass", "Crust", "Gravel", "Litter",
"Agrass", "Pforb", "Pgrass", "Rock", "Shrub")
?sum
plot_daub_cover$All <- plot_daub_cover$Aforb + plot_daub_cover$Cheatgrass + plot_daub_cover$Agrass + plot_daub_cover$Pforb +
plot_daub_cover$Pgrass + plot_daub_cover$Shrub
##Understory data formatting
##
library("reshape2")
library("plyr")
library("effects")
daub <- read.csv("./raw data/daub_cover.csv")
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
trees <- read.csv("./raw data/trees_updated_with_logs_041716.csv")
tree_pdc <- read.csv("./raw data/all_trees_with_delta_and_ENN_041916.csv")
greenwood_under <- read.csv("./raw data/Greenwood_Understory_Variables_SF_edits.csv")
tcover <- read.csv("./raw data/tree_and_shrub_cover_020815.csv")
names(tcover)[3] <- "Shrub_cover_li"
source("./calculate_awc.R")
soil <- calculate_awc(soil_raw = "./raw data/soils_missing_imputed_012016.csv")
clim <- read.csv("./raw data/ALL_climate_variables.csv")
names(clim)[2] <- "Plot"
other_vars <- read.csv("./raw data/all_vars_EXPORT.csv")
#remaking data into plot average cover
plot_daub_cover <- dcast(daub, Plot ~ Cover.type, value.var = "Midpoint.value", fun.aggregate = mean)
names(plot_daub_cover) <- c("Plot", "Aforb", "Bg", "Cheatgrass", "Crust", "Gravel", "Litter",
"Agrass", "Pforb", "Pgrass", "Rock", "Shrub")
plot_daub_cover$All <- plot_daub_cover$Aforb + plot_daub_cover$Cheatgrass + plot_daub_cover$Agrass + plot_daub_cover$Pforb +
plot_daub_cover$Pgrass + plot_daub_cover$Shrub
#-------------------------------------------------------------
#Create tree data plot-level
#impute meanas for missing values
for (i in which(sapply(trees, is.numeric))) {
for (j in which(is.na(trees[, i]))) {
trees[j, i] <- mean(trees[trees[, "Plot"] == trees[j, "Plot"], i],  na.rm = TRUE)
}
}
plot_trees <- data.frame(Plot = character(102),
Live_ba = numeric(102),
Dead_ba = numeric(102),
Total_ba = numeric(102),
Dead_rat = numeric(102),
Delta_pdc = numeric(102))
plot_trees$Plot <- as.character(unique(plot_daub_cover$Plot))
for(i in (1:nrow(plot_trees))){
plot_trees$Live_ba[i] <- sum(trees[trees$Live == "Y" & trees$Plot == as.character(plot_trees$Plot[i]), ]$BA_cm,
na.rm = TRUE)
plot_trees$Dead_ba[i] <- sum(trees[trees$Live == "N" & trees$Plot == as.character(plot_trees$Plot[i]), ]$BA_cm,
na.rm = TRUE)
plot_trees$Total_ba[i] <- sum(trees[trees$Plot == as.character(plot_trees$Plot[i]), ]$BA_cm, na.rm = TRUE)
plot_trees$Dead_rat[i] <- plot_trees$Dead_ba[i] / plot_trees$Total_ba[i]
plot_trees$Delta_pdc[i] <- weighted.mean(tree_pdc[tree_pdc$Plot == as.character(plot_trees$Plot[i]), "Delta_pdc"],
tree_pdc[tree_pdc$Plot == as.character(plot_trees$Plot[i]), "BA_cm"])
}
#-----------------------------------------------
# Plot-level cover for everything and also predictor variables
#fill in any NAs
plot_data <- join(plot_daub_cover, plot_trees, by = c("Plot"))
plot_data <- join(plot_data, clim[, c("Plot", "cwd_normal_cum")], by = "Plot")
plot_data <- join(plot_data, soil[, c("Plot", "AWC")], by = "Plot")
plot_data <- join(plot_data, tcover[, c("Plot", "Tree_cover", "Shrub_cover_li")], by = "Plot")
plot_data <- join(plot_data, other_vars[, c("Plot", "Cluster", "Avg_depth")], by = "Plot")
for (i in which(sapply(plot_data, is.numeric))) {
for (j in which(is.na(plot_data[, i]))) {
plot_data[j, i] <- mean(plot_data[, i],  na.rm = TRUE)
}
}
levels(plot_data$Cluster) <- c(levels(plot_data$Cluster), "NPELECTRICEEL")
plot_data[(plot_data$Plot %in% c("NPELECTRICEEL", "NPELECTRICEEL120",
"NPELECTRICEEL240", "NPELECTRICEEL360")), "Cluster"] <- "NPELECTRICEEL"
write.csv(plot_data, "./clean data/plot_data.csv")
library("MuMIn")
library("lme4")
library("car")
library("effects")
library("plyr")
library("lmerTest")
library("vegan")
library("reshape2")
library("plyr")
setwd("C:/Users/Sam/Google Drive/Projects/MS Thesis/Understory")
plot_data <- read.csv("./clean data/plot_data.csv")
#exploration
hist(asin(sqrt(plot_data$All/100)))
sqrt(plot_data$All/100)
plot_data$All/100
plot_data$All
plot_daub_cover
##Understory data formatting
##
library("reshape2")
library("plyr")
library("effects")
daub <- read.csv("./raw data/daub_cover.csv")
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
trees <- read.csv("./raw data/trees_updated_with_logs_041716.csv")
tree_pdc <- read.csv("./raw data/all_trees_with_delta_and_ENN_041916.csv")
greenwood_under <- read.csv("./raw data/Greenwood_Understory_Variables_SF_edits.csv")
tcover <- read.csv("./raw data/tree_and_shrub_cover_020815.csv")
names(tcover)[3] <- "Shrub_cover_li"
source("./calculate_awc.R")
soil <- calculate_awc(soil_raw = "./raw data/soils_missing_imputed_012016.csv")
clim <- read.csv("./raw data/ALL_climate_variables.csv")
names(clim)[2] <- "Plot"
other_vars <- read.csv("./raw data/all_vars_EXPORT.csv")
#remaking data into plot average cover
plot_daub_cover <- dcast(daub, Plot ~ Cover.type, value.var = "Midpoint.value", fun.aggregate = mean)
names(plot_daub_cover) <- c("Plot", "Aforb", "Bg", "Cheatgrass", "Crust", "Gravel", "Litter",
"Agrass", "Pforb", "Pgrass", "Rock", "Shrub")
plot_daub_cover$Aforb
plot_daub_cover$Cheatgrass
plot_daub_cover
##Understory data formatting
##
library("reshape2")
library("plyr")
library("effects")
daub <- read.csv("./raw data/daub_cover.csv")
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
trees <- read.csv("./raw data/trees_updated_with_logs_041716.csv")
tree_pdc <- read.csv("./raw data/all_trees_with_delta_and_ENN_041916.csv")
greenwood_under <- read.csv("./raw data/Greenwood_Understory_Variables_SF_edits.csv")
tcover <- read.csv("./raw data/tree_and_shrub_cover_020815.csv")
names(tcover)[3] <- "Shrub_cover_li"
source("./calculate_awc.R")
soil <- calculate_awc(soil_raw = "./raw data/soils_missing_imputed_012016.csv")
clim <- read.csv("./raw data/ALL_climate_variables.csv")
names(clim)[2] <- "Plot"
other_vars <- read.csv("./raw data/all_vars_EXPORT.csv")
daub
#remaking data into plot average cover
plot_daub_cover <- dcast(daub, Plot ~ Cover.type, value.var = "Midpoint.value", fun.aggregate = mean)
plot_daub_cover
levels(daub$Plot)
daub <- read.csv("./raw data/daub_cover.csv")
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
daub$unique_quad <- paste0(daub$Plot, daub$Transect, daub$Meter)
daub[daub$Cover.type == "Perennial forb ", "Cover.type"] <- "Perennial forb"
daub[daub$Cover.type == "Shrub ", "Cover.type"] <- "Shrub"
trees <- read.csv("./raw data/trees_updated_with_logs_041716.csv")
tree_pdc <- read.csv("./raw data/all_trees_with_delta_and_ENN_041916.csv")
greenwood_under <- read.csv("./raw data/Greenwood_Understory_Variables_SF_edits.csv")
tcover <- read.csv("./raw data/tree_and_shrub_cover_020815.csv")
names(tcover)[3] <- "Shrub_cover_li"
source("./calculate_awc.R")
soil <- calculate_awc(soil_raw = "./raw data/soils_missing_imputed_012016.csv")
clim <- read.csv("./raw data/ALL_climate_variables.csv")
names(clim)[2] <- "Plot"
other_vars <- read.csv("./raw data/all_vars_EXPORT.csv")
#remaking data into plot average cover
plot_daub_cover <- dcast(daub, Plot ~ Cover.type, value.var = "Midpoint.value", fun.aggregate = mean)
plot_daub_cover
View(daub_cov)
View(daub)
daub <- read.csv("./raw data/daub_cover.csv", stringsAsFactors = FALSE)
#some data proofing
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$unique_quad <- paste0(daub$Plot, daub$Transect, daub$Meter)
daub[daub$Cover.type == "Perennial forb ", "Cover.type"] <- "Perennial forb"
daub[daub$Cover.type == "Shrub ", "Cover.type"] <- "Shrub"
daub
View(daub)
daub <- read.csv("./raw data/daub_cover.csv", stringsAsFactors = FALSE)
#some data proofing
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$unique_quad <- paste0(daub$Plot, daub$Transect, daub$Meter)
daub[daub$Cover.type == "Perennial forb ", "Cover.type"] <- "Perennial forb"
daub[daub$Cover.type == "Shrub ", "Cover.type"] <- "Shrub"
trees <- read.csv("./raw data/trees_updated_with_logs_041716.csv")
tree_pdc <- read.csv("./raw data/all_trees_with_delta_and_ENN_041916.csv")
greenwood_under <- read.csv("./raw data/Greenwood_Understory_Variables_SF_edits.csv")
tcover <- read.csv("./raw data/tree_and_shrub_cover_020815.csv")
names(tcover)[3] <- "Shrub_cover_li"
source("./calculate_awc.R")
soil <- calculate_awc(soil_raw = "./raw data/soils_missing_imputed_012016.csv")
clim <- read.csv("./raw data/ALL_climate_variables.csv")
names(clim)[2] <- "Plot"
other_vars <- read.csv("./raw data/all_vars_EXPORT.csv")
#remaking data into plot average cover
plot_daub_cover <- dcast(daub, Plot ~ Cover.type, value.var = "Midpoint.value", fun.aggregate = mean)
names(plot_daub_cover) <- c("Plot", "Aforb", "Bg", "Cheatgrass", "Crust", "Gravel", "Litter",
"Agrass", "Pforb", "Pgrass", "Rock", "Shrub")
plot_daub_cover$All <- plot_daub_cover$Aforb + plot_daub_cover$Cheatgrass + plot_daub_cover$Agrass + plot_daub_cover$Pforb +
plot_daub_cover$Pgrass + plot_daub_cover$Shrub
View(plot_daub_cover)
##Understory data formatting
##
library("reshape2")
library("plyr")
library("effects")
daub <- read.csv("./raw data/daub_cover.csv", stringsAsFactors = FALSE)
#some data proofing
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$unique_quad <- paste0(daub$Plot, daub$Transect, daub$Meter)
daub[daub$Cover.type == "Perennial forb ", "Cover.type"] <- "Perennial forb"
daub[daub$Cover.type == "Shrub ", "Cover.type"] <- "Shrub"
trees <- read.csv("./raw data/trees_updated_with_logs_041716.csv")
tree_pdc <- read.csv("./raw data/all_trees_with_delta_and_ENN_041916.csv")
greenwood_under <- read.csv("./raw data/Greenwood_Understory_Variables_SF_edits.csv")
tcover <- read.csv("./raw data/tree_and_shrub_cover_020815.csv")
names(tcover)[3] <- "Shrub_cover_li"
source("./calculate_awc.R")
soil <- calculate_awc(soil_raw = "./raw data/soils_missing_imputed_012016.csv")
clim <- read.csv("./raw data/ALL_climate_variables.csv")
names(clim)[2] <- "Plot"
other_vars <- read.csv("./raw data/all_vars_EXPORT.csv")
#remaking data into plot average cover
plot_daub_cover <- dcast(daub, Plot ~ Cover.type, value.var = "Midpoint.value", fun.aggregate = mean)
names(plot_daub_cover) <- c("Plot", "Aforb", "Bg", "Cheatgrass", "Crust", "Gravel", "Litter",
"Agrass", "Pforb", "Pgrass", "Rock", "Shrub")
plot_daub_cover$All <- plot_daub_cover$Aforb + plot_daub_cover$Cheatgrass + plot_daub_cover$Agrass + plot_daub_cover$Pforb +
plot_daub_cover$Pgrass + plot_daub_cover$Shrub
#-------------------------------------------------------------
#Create tree data plot-level
#impute meanas for missing values
for (i in which(sapply(trees, is.numeric))) {
for (j in which(is.na(trees[, i]))) {
trees[j, i] <- mean(trees[trees[, "Plot"] == trees[j, "Plot"], i],  na.rm = TRUE)
}
}
plot_trees <- data.frame(Plot = character(102),
Live_ba = numeric(102),
Dead_ba = numeric(102),
Total_ba = numeric(102),
Dead_rat = numeric(102),
Delta_pdc = numeric(102))
plot_trees$Plot <- as.character(unique(plot_daub_cover$Plot))
for(i in (1:nrow(plot_trees))){
plot_trees$Live_ba[i] <- sum(trees[trees$Live == "Y" & trees$Plot == as.character(plot_trees$Plot[i]), ]$BA_cm,
na.rm = TRUE)
plot_trees$Dead_ba[i] <- sum(trees[trees$Live == "N" & trees$Plot == as.character(plot_trees$Plot[i]), ]$BA_cm,
na.rm = TRUE)
plot_trees$Total_ba[i] <- sum(trees[trees$Plot == as.character(plot_trees$Plot[i]), ]$BA_cm, na.rm = TRUE)
plot_trees$Dead_rat[i] <- plot_trees$Dead_ba[i] / plot_trees$Total_ba[i]
plot_trees$Delta_pdc[i] <- weighted.mean(tree_pdc[tree_pdc$Plot == as.character(plot_trees$Plot[i]), "Delta_pdc"],
tree_pdc[tree_pdc$Plot == as.character(plot_trees$Plot[i]), "BA_cm"])
}
#-----------------------------------------------
# Plot-level cover for everything and also predictor variables
#fill in any NAs
plot_data <- join(plot_daub_cover, plot_trees, by = c("Plot"))
plot_data <- join(plot_data, clim[, c("Plot", "cwd_normal_cum")], by = "Plot")
plot_data <- join(plot_data, soil[, c("Plot", "AWC")], by = "Plot")
plot_data <- join(plot_data, tcover[, c("Plot", "Tree_cover", "Shrub_cover_li")], by = "Plot")
plot_data <- join(plot_data, other_vars[, c("Plot", "Cluster", "Avg_depth")], by = "Plot")
for (i in which(sapply(plot_data, is.numeric))) {
for (j in which(is.na(plot_data[, i]))) {
plot_data[j, i] <- mean(plot_data[, i],  na.rm = TRUE)
}
}
levels(plot_data$Cluster) <- c(levels(plot_data$Cluster), "NPELECTRICEEL")
plot_data[(plot_data$Plot %in% c("NPELECTRICEEL", "NPELECTRICEEL120",
"NPELECTRICEEL240", "NPELECTRICEEL360")), "Cluster"] <- "NPELECTRICEEL"
write.csv(plot_data, "./clean data/plot_data.csv")
plot_data <- read.csv("./clean data/plot_data.csv")
library("MuMIn")
library("lme4")
library("car")
library("effects")
library("plyr")
library("lmerTest")
library("vegan")
library("reshape2")
library("plyr")
setwd("C:/Users/Sam/Documents/Research/MS Thesis/Understory")
plot_data <- read.csv("./clean data/plot_data.csv")
#exploration
hist(asin(sqrt(plot_data$All/100)))
hist(logit(plot_data$Cheatgrass/100 + min(plot_data[plot_data$Cheatgrass != 0, "Cheatgrass"])))
hist(log(plot_data$Cheatgrass/100 + .01))
#exploration
hist(asin(sqrt(plot_data$All/100)))
hist(logit(plot_data$All/100 + min(plot_data[plot_data$All != 0, "All"])))
hist(log(plot_data$All/100 + .01))
#exploration
hist(asin(sqrt(plot_data$All/100)))
hist(logit(plot_data$All/100 + min(plot_data[plot_data$All != 0, "All"])))
hist(log(plot_data$All/100 + .01))
leveneTest(residuals(cheatgrass_plot) ~ plot_data$Cheatgrass)
cheatgrass_plot <- lmer(asin(sqrt(Cheatgrass/100)) ~ scale(Tree_cover) + scale(Delta_pdc)*scale(cwd_normal_cum) +
scale(AWC) + (1|Cluster), data = plot_data)
cheatgrass_plot <- lmer(logit(Cheatgrass/100) ~ scale(Tree_cover) + scale(Delta_pdc)*scale(cwd_normal_cum) +
scale(AWC) + (1|Cluster), data = plot_data)
summary(lm(asin(sqrt(Cheatgrass/100)) ~ scale(Tree_cover) + scale(Delta_pdc)*scale(cwd_normal_cum) +
scale(AWC), data = plot_data))
summary(cheatgrass_plot, ddf = "Kenward-Roger")
r.squaredGLMM(cheatgrass_plot)
plot(allEffects(cheatgrass_plot, partial.residuals = TRUE))
plot(cheatgrass_plot)
AICc(cheatgrass_plot)
scatter.smooth(residuals(cheatgrass_plot) ~ predict(cheatgrass_plot))
leveneTest(residuals(cheatgrass_plot) ~ plot_data$Cheatgrass)
summary(lm(asin(sqrt(Cheatgrass/100)) ~ scale(Tree_cover) + scale(Delta_pdc)*scale(cwd_normal_cum) +
scale(AWC), data = plot_data))
summary(cheatgrass_plot, ddf = "Kenward-Roger")
r.squaredGLMM(cheatgrass_plot)
plot(allEffects(cheatgrass_plot, partial.residuals = TRUE))
cheatgrass_plot <- lmer(asin(sqrt(Cheatgrass/100)) ~ scale(Tree_cover) + scale(Delta_pdc)*scale(cwd_normal_cum) +
scale(AWC) + (1|Cluster), data = plot_data)
summary(cheatgrass_plot, ddf = "Kenward-Roger")
r.squaredGLMM(cheatgrass_plot)

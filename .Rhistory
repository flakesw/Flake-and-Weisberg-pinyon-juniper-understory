data <- beetle[beetle$repl == sec, ]
for(i in 1:length(unique(beetle$trt))){
treat <- unique(beetle$trt)[i]
lines(data[data$trt == treat, "N"] ~ data[data$trt == treat, "timestep"],
col = cols[i],
lwd = 0.5)
points(data[data$trt == treat, "N"] ~ data[data$trt == treat, "timestep"],
bg = cols[i],
pch = 21,
cex = 1)
}
}
legend("topleft", legend = c("Cracked wheat no yeast",
"Cracked wheat with yeast",
"Flour and yeast"), col = cols, lwd = 2.5)
flour_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "flour.yeast", ],
fct = L.3(), type = "continuous")
plot(flour_mod, add = TRUE, type = "none", lwd = 2.5, col = "orange")
yeast_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "cracked.wheat.yeast", ],
fct = L.3(), type = "continuous")
plot(yeast_mod, add = TRUE, type = "none", lwd = 2.5, col = "cyan")
no_yeast_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "cracked.wheat.no.yeast", ],
fct = L.3(), type = "continuous")
plot(no_yeast_mod, add = TRUE, type = "none", lwd = 2.5, col = "purple")
dev.off()
library(ggplot2)
library(drc)
beetle<-read.csv("student_data.csv")
names(beetle)[1] <- "trt"
names(beetle)[2] <- "repl"
beetle[, 2] <- as.factor(beetle[, 2])
beetle <- beetle[c(1:126), ]
cols <- c("purple", "cyan", "orange")
png(filename = "beetle_individual.png",
type="cairo",
units="in",
width = 8,
height=8,
pointsize=12,
res=160)
plot(N ~ timestep, data = beetle)
for(sec in unique(beetle$repl)){
data <- beetle[beetle$repl == sec, ]
for(i in 1:length(unique(beetle$trt))){
treat <- unique(beetle$trt)[i]
lines(data[data$trt == treat, "N"] ~ data[data$trt == treat, "timestep"],
col = cols[i],
lwd = 0.5)
points(data[data$trt == treat, "N"] ~ data[data$trt == treat, "timestep"],
bg = cols[i],
pch = 21,
cex = 1)
}
}
legend("topleft", legend = c("Cracked wheat no yeast",
"Cracked wheat with yeast",
"Flour and yeast"), col = cols, lwd = 2.5)
flour_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "flour.yeast", ],
fct = L.3(), type = "continuous")
plot(flour_mod, add = TRUE, type = "none", lwd = 3, col = "orange")
yeast_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "cracked.wheat.yeast", ],
fct = L.3(), type = "continuous")
plot(yeast_mod, add = TRUE, type = "none", lwd = 3, col = "cyan")
no_yeast_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "cracked.wheat.no.yeast", ],
fct = L.3(), type = "continuous")
plot(no_yeast_mod, add = TRUE, type = "none", lwd = 3, col = "purple")
dev.off()
library(ggplot2)
library(drc)
beetle<-read.csv("student_data.csv")
names(beetle)[1] <- "trt"
names(beetle)[2] <- "repl"
beetle[, 2] <- as.factor(beetle[, 2])
beetle <- beetle[c(1:126), ]
cols <- c("purple", "cyan", "orange")
png(filename = "beetle_individual.png",
type="cairo",
units="in",
width = 8,
height=8,
pointsize=12,
res=160)
plot(N ~ timestep, data = beetle,
log = "y")
for(sec in unique(beetle$repl)){
data <- beetle[beetle$repl == sec, ]
for(i in 1:length(unique(beetle$trt))){
treat <- unique(beetle$trt)[i]
lines(data[data$trt == treat, "N"] ~ data[data$trt == treat, "timestep"],
col = cols[i],
lwd = 0.5)
points(data[data$trt == treat, "N"] ~ data[data$trt == treat, "timestep"],
bg = cols[i],
pch = 21,
cex = 1)
}
}
legend("topleft", legend = c("Cracked wheat no yeast",
"Cracked wheat with yeast",
"Flour and yeast"), col = cols, lwd = 2.5)
flour_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "flour.yeast", ],
fct = L.3(), type = "continuous")
plot(flour_mod, add = TRUE, type = "none", lwd = 3, col = "orange")
yeast_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "cracked.wheat.yeast", ],
fct = L.3(), type = "continuous")
plot(yeast_mod, add = TRUE, type = "none", lwd = 3, col = "cyan")
no_yeast_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "cracked.wheat.no.yeast", ],
fct = L.3(), type = "continuous")
plot(no_yeast_mod, add = TRUE, type = "none", lwd = 3, col = "purple")
dev.off()
library(ggplot2)
library(drc)
beetle<-read.csv("student_data.csv")
names(beetle)[1] <- "trt"
names(beetle)[2] <- "repl"
beetle[, 2] <- as.factor(beetle[, 2])
beetle <- beetle[c(1:126), ]
cols <- c("purple", "cyan", "orange")
png(filename = "beetle_individual.png",
type="cairo",
units="in",
width = 8,
height=8,
pointsize=12,
res=160)
plot(N ~ timestep, data = beetle)
for(sec in unique(beetle$repl)){
data <- beetle[beetle$repl == sec, ]
for(i in 1:length(unique(beetle$trt))){
treat <- unique(beetle$trt)[i]
lines(data[data$trt == treat, "N"] ~ data[data$trt == treat, "timestep"],
col = cols[i],
lwd = 0.5)
points(data[data$trt == treat, "N"] ~ data[data$trt == treat, "timestep"],
bg = cols[i],
pch = 21,
cex = 1)
}
}
legend("topleft", legend = c("Cracked wheat no yeast",
"Cracked wheat with yeast",
"Flour and yeast"), col = cols, lwd = 2.5)
flour_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "flour.yeast", ],
fct = L.3(), type = "continuous")
plot(flour_mod, add = TRUE, type = "none", lwd = 3, col = "orange")
yeast_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "cracked.wheat.yeast", ],
fct = L.3(), type = "continuous")
plot(yeast_mod, add = TRUE, type = "none", lwd = 3, col = "cyan")
no_yeast_mod <- drm(N ~ timestep, data = beetle[beetle$trt == "cracked.wheat.no.yeast", ],
fct = L.3(), type = "continuous")
plot(no_yeast_mod, add = TRUE, type = "none", lwd = 3, col = "purple")
dev.off()
unique(ms[!(ms$unique_quad %in% unique(daub$unique_quad)) & ms$Plot == "DES998360", "unique_quad"])
unique(daub[!(daub$unique_quad %in% unique(ms$unique_quad)) & daub$Plot == "DES998360", "unique_quad"])
## Understory electivity
library(plyr)
library(vioplot)
library(reshape2)
daub <- read.csv("./raw data/daub_cover.csv")
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$unique_quad <- paste0(daub$Plot, daub$Transect, daub$Meter)
species<- read.csv("./raw data/spp_cover2.csv")
species <- species[(species$Transect %in% c("N", "E", "S", "W")), ]
species$unique_quad <- paste0(species$Plot, species$Transect, species$Meter)
count(species, vars = c("Plot", "Transect"))
#-----------------------------------------------------------------------
# Calculate mean cover, cover by quadrat, cover by plot
#-------------------------------------------------------------------
# Mean overall cover
length(unique(daub$unique_quad))
spp_abund <- aggregate(species$Cover / 2040, by = list(species$Species), FUN = sum)
spp_abund <- spp_abund[order(spp_abund[, 1], decreasing = FALSE), ]
#percent of quadrats occupied
quadrat_abund <- as.data.frame(table(species[species$Cover != 0, ]$Species))
quadrat_abund <- quadrat_abund[order(quadrat_abund[, 1], decreasing = FALSE), ]
quadrat_abund[, 2] <- quadrat_abund[, 2] * 100 / 2040
count <- table(species$Species, species$Plot)
is.not.zero <- function(x){
if((x) == 0){return(0)}
else{return(1)}
}
is.not.zero
presence <- apply(count, c(1,2), FUN = is.not.zero)
plot_presence <- as.data.frame(rowSums(presence))/102*100
spp_abund <- cbind(spp_abund, quadrat_abund[-1, 2], plot_presence[-1, 1])
spp_abund
write.csv(spp_abund, "./outputs/species_summary.csv")
## generate cover data for different subsets
n_quads_occ <- length(unique(species$unique_quad)) #number of quadrat-by-group records
spp_cov <- data.frame(unique_quad = unique(species$unique_quad),
poasec = numeric(n_quads_occ),
othergrass = numeric(n_quads_occ),
phlhoo = numeric(n_quads_occ),
otherforb = numeric(n_quads_occ))
for(i in 1:n_quads_occ){
spp_cov$poasec[i] <- ifelse(species[species$unique_quad == spp_cov$unique_quad[i], ]$Species == "POASEC",
species[species$unique_quad == spp_cov$unique_quad[i] & species$Species == "POASEC", ]$Cover, 0)
spp_cov$othergrass[i] <- ifelse(species[species$unique_quad == spp_cov$unique_quad[i], ]$Species %in% c("PSESPI", "LEYCIN", "ELYELY", "STITHU"),
sum(species[species$unique_quad == spp_cov$unique_quad[i]
& species$Species %in% c("PSESPI", "LEYCIN", "ELYELY", "STITHU"), ]$Cover), 0)
spp_cov$phlhoo[i] <- ifelse(species[species$unique_quad == spp_cov$unique_quad[i], ]$Species == "PHLHOO",
species[species$unique_quad == spp_cov$unique_quad[i] & species$Species == "PHLHOO", ]$Cover, 0)
spp_cov$otherforb[i] <- ifelse(species[species$unique_quad == spp_cov$unique_quad[i], ]$Species %in% c("CREACA", "CREACU", "STEACA", "ERICAE", "LEPPUN", "ERIUMB", "AREACU","LESKIN","GALAPA","ASTPUR","BALSAG","CRYFLA","ERIMIC","MINKIN","ASTOOP","OPUPOL","ARAHOL","ANTDIM","BOEHOL"),
sum(species[species$unique_quad == spp_cov$unique_quad[i]
& species$Species %in% c("CREACA", "CREACU", "STEACA", "ERICAE", "LEPPUN", "ERIUMB", "AREACU","LESKIN","GALAPA","ASTPUR","BALSAG","CRYFLA","ERIMIC","MINKIN","ASTOOP","OPUPOL","ARAHOL","ANTDIM","BOEHOL"), ]$Cover), 0)
}
# import and recode microsite data
ms <- read.csv("./raw data/microsite.csv")
ms$ms <- ifelse(ms$Microsite %in% c("PI",  "JI",  "CI"), "Live Inner",
ifelse(ms$Microsite %in% c("PO", "JO", "CO"), "Live Outer",
ifelse(ms$Microsite %in% c("PI(S)", "PO(S)", "JI(S)", "JO(S)", "CI(S)", "CO(S)"), "Dead",
ifelse(ms$Microsite =="LOG", "Log",
ifelse(ms$Microsite == "I", "Inter", NA)))))
ms <- ms[(ms$Transect %in% c("N", "S", "E", "W")), ]
ms$unique_quad <- paste0(ms$Plot, ms$Transect, ms$Meter)
#how many quadrats are messed up?
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"])
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11
#which quadrats are messed up?
unique(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "unique_quad"])
unique(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "unique_quad"])
unique(ms[!(ms$unique_quad %in% unique(daub$unique_quad)) & ms$Plot == "DES998360", "unique_quad"])
unique(daub[!(daub$unique_quad %in% unique(ms$unique_quad)) & daub$Plot == "DES998360", "unique_quad"])
#which quadrats are messed up?
unique(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "unique_quad"])
unique(ms[!(ms$unique_quad %in% unique(daub$unique_quad)) & ms$Plot == "DES998360", "unique_quad"])
unique(daub[!(daub$unique_quad %in% unique(ms$unique_quad)) & daub$Plot == "DES998360", "unique_quad"])
#how many quadrats are messed up?
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"])
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11
count(species, vars = c("Plot", "Transect"))
head(daub)
head(ms)
#how many quadrats are messed up?
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"])
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11
#which quadrats are messed up?
unique(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "unique_quad"])
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11 #problems with SPR1575, TOI1577360
#which quadrats are messed up?
unique(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "unique_quad"])
unique(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "unique_quad"])
(daub$unique_quad %in% unique(ms$unique_quad)
)
daub$unique_quad
ms$unique_quad
View(ms)
unique(ms$unique_quad)
# import and recode microsite data
ms <- read.csv("./raw data/microsite.csv")
ms$ms <- ifelse(ms$Microsite %in% c("PI",  "JI",  "CI"), "Live Inner",
ifelse(ms$Microsite %in% c("PO", "JO", "CO"), "Live Outer",
ifelse(ms$Microsite %in% c("PI(S)", "PO(S)", "JI(S)", "JO(S)", "CI(S)", "CO(S)"), "Dead",
ifelse(ms$Microsite =="LOG", "Log",
ifelse(ms$Microsite == "I", "Inter", NA)))))
ms <- ms[(ms$Transect %in% c("N", "S", "E", "W")), ]
# import and recode microsite data
ms <- read.csv("./raw data/microsite.csv")
ms$ms <- ifelse(ms$Microsite %in% c("PI",  "JI",  "CI"), "Live Inner",
ifelse(ms$Microsite %in% c("PO", "JO", "CO"), "Live Outer",
ifelse(ms$Microsite %in% c("PI(S)", "PO(S)", "JI(S)", "JO(S)", "CI(S)", "CO(S)"), "Dead",
ifelse(ms$Microsite =="LOG", "Log",
ifelse(ms$Microsite == "I", "Inter", NA)))))
ms <- ms[(ms$Transect %in% c("N", "S", "E", "W")), ]
# import and recode microsite data
ms <- read.csv("./raw data/microsite.csv")
ms$ms <- ifelse(ms$Microsite %in% c("PI",  "JI",  "CI"), "Live Inner",
ifelse(ms$Microsite %in% c("PO", "JO", "CO"), "Live Outer",
ifelse(ms$Microsite %in% c("PI(S)", "PO(S)", "JI(S)", "JO(S)", "CI(S)", "CO(S)"), "Dead",
ifelse(ms$Microsite =="LOG", "Log",
ifelse(ms$Microsite == "I", "Inter", NA)))))
table(ms$Transect)
ms[ms$Transect == "e"] <- "E"
ms[ms$Transect == "e"]
ms[ms$Transect == "e", "Transect"] <- "E"
ms[ms$Transect == "e", "Transect
]
""
ms[ms$Transect == "e", "Transect"]
# import and recode microsite data
ms <- read.csv("./raw data/microsite.csv")
ms$ms <- ifelse(ms$Microsite %in% c("PI",  "JI",  "CI"), "Live Inner",
ifelse(ms$Microsite %in% c("PO", "JO", "CO"), "Live Outer",
ifelse(ms$Microsite %in% c("PI(S)", "PO(S)", "JI(S)", "JO(S)", "CI(S)", "CO(S)"), "Dead",
ifelse(ms$Microsite =="LOG", "Log",
ifelse(ms$Microsite == "I", "Inter", NA)))))
table(ms$Transect)
ms[ms$Transect == "e", "Transect"] <- "E"
ms[ms$Transect == "e", "Transect"] <- "E"
ms[ms$Transect == "s", "Transect"] <- "S"
ms[ms$Transect == "w", "Transect"] <- "W"
ms[ms$Transect == "n", "Transect"] <- "N"
ms <- ms[(ms$Transect %in% c("N", "S", "E", "W")), ]
ms$unique_quad <- paste0(ms$Plot, ms$Transect, ms$Meter)
#how many quadrats are messed up?
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"]) #all MS quads are in daub data
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11 #problems with SPR1575, TOI1577360
#which quadrats are messed up?
unique(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "unique_quad"]) #problems with SPR1575, SS256, TOI1577
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11 #problems with SPR1575, TOI1577360
unique(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "unique_quad"])
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11 #problems with SPR1575, TOI1577360
unique(ms[!(ms$unique_quad %in% unique(daub$unique_quad)) & ms$Plot == "DES998360", "unique_quad"])
unique(ms[!(ms$unique_quad %in% unique(daub$unique_quad)) & ms$Plot == "DES998360", "unique_quad"])
unique(daub[!(daub$unique_quad %in% unique(ms$unique_quad)) & daub$Plot == "DES998360", "unique_quad"])
unique(ms$Plot) %in% unique(daub$Plot)
unique(ms$Plot)[unique(ms$Plot) %in% unique(daub$Plot)]
unique(ms$Plot)[!(unique(ms$Plot) %in% unique(daub$Plot))]
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11 #problems with SPR1575, TOI1577360
## Understory electivity
library(plyr)
library(vioplot)
library(reshape2)
daub <- read.csv("./raw data/daub_cover.csv")
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$unique_quad <- paste0(daub$Plot, daub$Transect, daub$Meter)
species<- read.csv("./raw data/spp_cover2.csv")
species <- species[(species$Transect %in% c("N", "E", "S", "W")), ]
species$unique_quad <- paste0(species$Plot, species$Transect, species$Meter)
count(species, vars = c("Plot", "Transect"))
species
# import and recode microsite data
ms <- read.csv("./raw data/microsite.csv")
ms$ms <- ifelse(ms$Microsite %in% c("PI",  "JI",  "CI"), "Live Inner",
ifelse(ms$Microsite %in% c("PO", "JO", "CO"), "Live Outer",
ifelse(ms$Microsite %in% c("PI(S)", "PO(S)", "JI(S)", "JO(S)", "CI(S)", "CO(S)"), "Dead",
ifelse(ms$Microsite =="LOG", "Log",
ifelse(ms$Microsite == "I", "Inter", NA)))))
ms[ms$Transect == "e", "Transect"] <- "E"
ms[ms$Transect == "s", "Transect"] <- "S"
ms[ms$Transect == "w", "Transect"] <- "W"
ms[ms$Transect == "n", "Transect"] <- "N"
ms <- ms[(ms$Transect %in% c("N", "S", "E", "W")), ]
ms$unique_quad <- paste0(ms$Plot, ms$Transect, ms$Meter)
unique(ms$Plot)[!(unique(ms$Plot) %in% unique(daub$Plot))]
!(unique(ms$Plot) %in% unique(daub$Plot))
ms$Plot
daub$Plot
daub <- read.csv("./raw data/daub_cover.csv")
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub <- read.csv("./raw data/daub_cover.csv")
daub
daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub$Plot <- as.character(daub$Plot)
as.character(daub$Plot)
daub <- read.csv("./raw data/daub_cover.csv")
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
as.character(daub$Plot)
daub$Plot
daub <- read.csv("./raw data/daub_cover.csv")
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub$Plot <- as.character(daub$Plot)
daub <- read.csv("./raw data/daub_cover.csv")
daub
daub <- read.csv("./raw data/daub_cover.csv")
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$unique_quad <- paste0(daub$Plot, daub$Transect, daub$Meter)
# import and recode microsite data
ms <- read.csv("./raw data/microsite.csv")
ms$ms <- ifelse(ms$Microsite %in% c("PI",  "JI",  "CI"), "Live Inner",
ifelse(ms$Microsite %in% c("PO", "JO", "CO"), "Live Outer",
ifelse(ms$Microsite %in% c("PI(S)", "PO(S)", "JI(S)", "JO(S)", "CI(S)", "CO(S)"), "Dead",
ifelse(ms$Microsite =="LOG", "Log",
ifelse(ms$Microsite == "I", "Inter", NA)))))
ms[ms$Transect == "e", "Transect"] <- "E"
ms[ms$Transect == "s", "Transect"] <- "S"
ms[ms$Transect == "w", "Transect"] <- "W"
ms[ms$Transect == "n", "Transect"] <- "N"
ms <- ms[(ms$Transect %in% c("N", "S", "E", "W")), ]
ms$unique_quad <- paste0(ms$Plot, ms$Transect, ms$Meter)
unique(ms$Plot)[!(unique(ms$Plot) %in% unique(daub$Plot))]
#how many quadrats are messed up?
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"]) #problems with DIA248360, NPEE120, SPR1575 (7 quads), SS256120, TOI1577360
#how many quadrats are messed up?
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"])[>0] #problems with DIA248360, NPEE120, SPR1575 (7 quads), SS256120, TOI1577360
#how many quadrats are messed up?
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"])[table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"]) > 0] #problems with DIA248360, NPEE120, SPR1575 (7 quads), SS256120, TOI1577360
#problems with DIA248360, NPEE120, SPR1575 (7 quads), SS256120, TOI1577360
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11 #problems with SPR1575, TOI1577360
daub <- read.csv("./raw data/daub_cover.csv")
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$unique_quad <- paste0(daub$Plot, daub$Transect, daub$Meter)
species<- read.csv("./raw data/spp_cover2.csv")
species <- species[(species$Transect %in% c("N", "E", "S", "W")), ]
species$unique_quad <- paste0(species$Plot, species$Transect, species$Meter)
count(species, vars = c("Plot", "Transect"))
# import and recode microsite data
ms <- read.csv("./raw data/microsite.csv")
ms$ms <- ifelse(ms$Microsite %in% c("PI",  "JI",  "CI"), "Live Inner",
ifelse(ms$Microsite %in% c("PO", "JO", "CO"), "Live Outer",
ifelse(ms$Microsite %in% c("PI(S)", "PO(S)", "JI(S)", "JO(S)", "CI(S)", "CO(S)"), "Dead",
ifelse(ms$Microsite =="LOG", "Log",
ifelse(ms$Microsite == "I", "Inter", NA)))))
ms[ms$Transect == "e", "Transect"] <- "E"
ms[ms$Transect == "s", "Transect"] <- "S"
ms[ms$Transect == "w", "Transect"] <- "W"
ms[ms$Transect == "n", "Transect"] <- "N"
ms <- ms[(ms$Transect %in% c("N", "S", "E", "W")), ]
ms$unique_quad <- paste0(ms$Plot, ms$Transect, ms$Meter)
unique(ms$Plot)[!(unique(ms$Plot) %in% unique(daub$Plot))]
unique(ms$Plot)
ms[ms$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
ms$Plot <- as.character(ms$Plot)
ms[ms$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
ms[ms$Plot == "NPElectricEel120", "Plot"]
# import and recode microsite data
ms <- read.csv("./raw data/microsite.csv")
ms$ms <- ifelse(ms$Microsite %in% c("PI",  "JI",  "CI"), "Live Inner",
ifelse(ms$Microsite %in% c("PO", "JO", "CO"), "Live Outer",
ifelse(ms$Microsite %in% c("PI(S)", "PO(S)", "JI(S)", "JO(S)", "CI(S)", "CO(S)"), "Dead",
ifelse(ms$Microsite =="LOG", "Log",
ifelse(ms$Microsite == "I", "Inter", NA)))))
ms[ms$Transect == "e", "Transect"] <- "E"
ms[ms$Transect == "s", "Transect"] <- "S"
ms[ms$Transect == "w", "Transect"] <- "W"
ms[ms$Transect == "n", "Transect"] <- "N"
ms$Plot <- as.character(ms$Plot)
ms$Plot
ms[ms$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
unique(ms$Plot)[!(unique(ms$Plot) %in% unique(daub$Plot))]
unique(daub$Plot)[!(unique(daub$Plot) %in% unique(ms$Plot))]
unique(ms$Plot)[!(unique(ms$Plot) %in% unique(daub$Plot))]
unique(daub$Plot)[!(unique(daub$Plot) %in% unique(ms$Plot))]
#how many quadrats are messed up?
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"])[table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"]) > 0]
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"])
unique(ms$Plot)[!(unique(ms$Plot) %in% unique(daub$Plot))]
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"])
#problems with DIA248360, NPEE120, SPR1575 (7 quads), SS256120, TOI1577360
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11 #problems with SPR1575, TOI1577360
daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])
daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"]
ms$Plot
daub$Plot
unique(ms$Plot)[!(unique(ms$Plot) %in% unique(daub$Plot))]
unique(daub$Plot)[!(unique(daub$Plot) %in% unique(ms$Plot))]
unique(daub$Plot)
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"])
ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"]
ms$unique_quad
ms$unique_quad <- paste0(ms$Plot, ms$Transect, ms$Meter)
#how many quadrats are messed up?
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"])[table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"]) > 0]
#problems with DIA248360, NPEE120, SPR1575 (7 quads), SS256120, TOI1577360
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11 #problems with SPR1575, TOI1577360
# import and recode microsite data
ms <- read.csv("./raw data/microsite.csv")
ms$ms <- ifelse(ms$Microsite %in% c("PI",  "JI",  "CI"), "Live Inner",
ifelse(ms$Microsite %in% c("PO", "JO", "CO"), "Live Outer",
ifelse(ms$Microsite %in% c("PI(S)", "PO(S)", "JI(S)", "JO(S)", "CI(S)", "CO(S)"), "Dead",
ifelse(ms$Microsite =="LOG", "Log",
ifelse(ms$Microsite == "I", "Inter", NA)))))
ms[ms$Transect == "e", "Transect"] <- "E"
ms[ms$Transect == "s", "Transect"] <- "S"
ms[ms$Transect == "w", "Transect"] <- "W"
ms[ms$Transect == "n", "Transect"] <- "N"
ms$Plot <- as.character(ms$Plot)
ms <- ms[(ms$Transect %in% c("N", "S", "E", "W")), ]
ms[ms$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
ms$unique_quad <- paste0(ms$Plot, ms$Transect, ms$Meter)
unique(ms$Plot)[!(unique(ms$Plot) %in% unique(daub$Plot))]
unique(daub$Plot)[!(unique(daub$Plot) %in% unique(ms$Plot))]
daub <- read.csv("./raw data/daub_cover.csv")
daub <- daub[(daub$Transect %in% c("N", "E", "S", "W")), ]
daub$Plot <- as.character(daub$Plot)
daub[daub$Plot == "NPElectricEel", "Plot"] <- "NPELECTRICEEL"
daub[daub$Plot == "NPElectricEel120", "Plot"] <- "NPELECTRICEEL120"
daub[daub$Plot == "NPElectricEel240", "Plot"] <- "NPELECTRICEEL240"
daub[daub$Plot == "NPElectricEel360", "Plot"] <- "NPELECTRICEEL360"
daub$Midpoint.value <- as.numeric(as.character((daub$Midpoint.value)))
daub$unique_quad <- paste0(daub$Plot, daub$Transect, daub$Meter)
species<- read.csv("./raw data/spp_cover2.csv")
species <- species[(species$Transect %in% c("N", "E", "S", "W")), ]
species$unique_quad <- paste0(species$Plot, species$Transect, species$Meter)
unique(ms$Plot)[!(unique(ms$Plot) %in% unique(daub$Plot))]
unique(daub$Plot)[!(unique(daub$Plot) %in% unique(ms$Plot))]
#how many quadrats are messed up?
table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"])[table(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "Plot"]) > 0]
#problems with DIA248360, NPEE120, SPR1575 (7 quads), SS256120, TOI1577360
table(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "Plot"])/11 #problems with SPR1575, TOI1577360
unique(ms$Plot)[!(unique(ms$Plot) %in% unique(daub$Plot))]
unique(daub$Plot)[!(unique(daub$Plot) %in% unique(ms$Plot))]
#which quadrats are messed up?
unique(ms[!(ms$unique_quad %in% unique(daub$unique_quad)), "unique_quad"]) #problems with SPR1575, SS256, TOI1577
unique(daub[!(daub$unique_quad %in% unique(ms$unique_quad)), "unique_quad"])
